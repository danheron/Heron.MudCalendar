@namespace Heron.MudCalendar
@inherits CalendarViewBase

@Render

@code {

    /// <summary>
    /// Renders the component.
    /// </summary>
    protected virtual RenderFragment Render =>
        @<MudDropContainer
             @ref="_dropContainer"
             T="CalendarItem"
             Items="Calendar.Items.OrderBy(i => i.Start)"
             ItemsSelector="@((item, dropzone) => item.Start.Date.ToString("d") == dropzone)"
             ItemIsDisabled="@((_) => !Calendar.EnableDragItems)"
             ItemDropped="ItemDropped"
             CanDropClass="mud-cal-month-drop-ok"
             Class="@Classname">
            <ChildContent>
                <table>
                    <thead>
                    @RenderHeader
                    </thead>
                    <tbody>
                    @RenderBody
                    </tbody>
                </table>
            </ChildContent>
            <ItemRenderer>
                @* <div style="z-index: 100000;"> *@
                @*     @CellTemplate.Invoke(context) *@
                @* </div> *@
                @RenderTemplate(context)
            </ItemRenderer>
        </MudDropContainer>;

    /// <summary>
    /// Renders the header of the component that contains the day names.
    /// </summary>
    protected virtual RenderFragment RenderHeader =>
        @<tr>
            @for (var i = 0; i < 7; i++)
            {
                <th>
                    @RenderDayTitle(i)
                </th>
            }
        </tr>;

    /// <summary>
    /// Renders the day name.
    /// </summary>
    protected virtual RenderFragment RenderDayTitle(int day) => __builder => { __builder.AddContent(1, Cells[day].Date.ToString("ddd")); };

    /// <summary>
    /// Renders the main body of the month view.
    /// </summary>
    protected virtual RenderFragment RenderBody => __builder =>
    {
        for (var week = 0; week < Cells.Count / 7; week++)
        {
            <tr style="@RowStyle">
                @for (var i = week * 7; i < (week + 1) * 7; i++)
                {
                    var cell = Cells[i];
                    @RenderCell(cell)
                }
            </tr>
        }
    };

    /// <summary>
    /// Renders an individual cell.
    /// </summary>
    protected virtual RenderFragment RenderCell(CalendarCell cell) =>
        @<td>
            <div class="@CellClassname" style="@DayStyle(cell)" @onclick="() => OnCellLinkClicked(cell)">
                <MudDropZone T="CalendarItem" Identifier="@cell.Date.Date.ToString("d")" Class="mud-cal-month-dropzone">
                    @RenderCellDayNumber(cell)
                    @if (cell.Items.Any())
                    {
                        <div class="mud-cal-month-cell-events">
                            @foreach (var item in cell.Items)
                            {
                                @CellTemplate?.Invoke(item)
                            }
                        </div>
                    }
                </MudDropZone>
            </div>
        </td>;

    /// <summary>
    /// Renders the day number of the cell.
    /// </summary>
    protected virtual RenderFragment RenderCellDayNumber(CalendarCell cell) =>
        @<div class="@DayClassname(cell)">
            @cell.Date.Day
        </div>;

    /// <summary>
    /// Renders the contents of the cell.
    /// </summary>
    protected virtual RenderFragment RenderCellContents(CalendarCell cell) => __builder =>
    {
        if (cell.Items.Any())
        {
            <div class="mud-cal-month-cell-events">
                @foreach (var item in cell.Items)
                {
                    @RenderTemplate(item)
                }
            </div>
        }
        <MudDropZone T="CalendarItem" Identifier="@cell.Date.Date.ToString("d")" Class="mud-cal-month-cell-events"/>
    };

    /// <summary>
    /// Renders the CellTemplate with a click handler if required.
    /// </summary>
    protected virtual RenderFragment RenderTemplate(CalendarItem item) => __builder =>
    {
        @if (Calendar.ItemClicked.HasDelegate)
        {
            <div @onclick="() => OnItemClicked(item)" @onclick:stopPropagation="true" class="mud-cal-clickable">
                @CellTemplate?.Invoke(item)
            </div>
        }
        else
        {
            <div>
                @CellTemplate?.Invoke(item)
            </div>
        }
    };

}