@namespace Heron.MudCalendar
@inherits MudComponentBase
@using CategoryTypes = Heron.MudCalendar.Attributes.CategoryTypes
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@typeparam T

@Render

@code {

    /// <summary>
    /// Renders the component.
    /// </summary>
    protected virtual RenderFragment Render => __builder =>
    {
        <CascadingValue IsFixed="false" Value="this">
            <div class="@Classname" style="@Styles">

                <div class="mud-calendar-container">
                    @if (ShowToolbar)
                    {
                        @RenderToolbar
                    }

                    <div class="@ViewClassname">
                        @switch (View)
                        {
                            case CalendarView.Day:
                                @RenderDayView
                                break;
                            case CalendarView.Week:
                                @RenderWeekView
                                break;
                            case CalendarView.WorkWeek:
                                @RenderWorkWeekView
                                break;
                            case CalendarView.Month:
                            default:
                                @RenderMonthView
                                break;
                        }
                    </div>
                </div>
            </div>
        </CascadingValue>
    };

    /// <summary>
    /// Defines the cell content for the Calendar.  Can be overriden for different Views by defining DayTemplate, WeekTemplate and MonthTemplate.
    /// </summary>
    [Attributes.Category(CategoryTypes.Calendar.Template)]
    [Parameter]
    public RenderFragment<T> CellTemplate { get; set; } =
        calendarItem =>
            @<div class="mud-cal-cell-template">
                <MudChip T="string" Label="true" Color="Color.Primary" Class="mud-cal-cell-template-chip">@calendarItem.Text</MudChip>
            </div>;

    /// <summary>
    /// Renders the toolbar of the component including prev/next buttons, date picker and view switcher.
    /// </summary>
    protected virtual RenderFragment RenderToolbar =>
        @<div class="mud-cal-toolbar" style="@ToolbarStyle">
                <div class="mud-cal-toolbar-nav align-center">
                    @if (ShowPrevNextButtons)
                    {
                            <MudIconButton Variant="@ButtonVariant" Icon="@Icons.Material.Outlined.ChevronLeft" aria-label="@PrevAriaLabel" Color="@Color" OnClick="OnPreviousClicked" />
                            <MudIconButton Variant="@ButtonVariant" Icon="@Icons.Material.Outlined.ChevronRight" aria-label="@NextAriaLabel" Color="@Color" OnClick="OnNextClicked" />
                    }
                    @if (ShowDatePicker)
                    {
                        <CalendarDatePicker Culture="@Culture" @ref="_datePicker" OpenTo="@(View == CalendarView.Month ? OpenTo.Month : OpenTo.Date)" FirstDayOfWeek="@GetFirstDayOfWeekByCalendarView(View)" FixDay="@(View == CalendarView.Month ? PickerDate?.Day : null)" Date="PickerDate" DateChanged="DatePickerDateChanged" View="View" Variant="ButtonVariant" Color="Color" PickerOpened="OnDatePickerOpened"/>
                    }
                    @if (ShowTodayButton)
                    {
                        <MudButton Variant="@ButtonVariant" Color="@Color" OnClick="OnTodayClicked">@DrawTodayText()</MudButton>
                    }
                    @if (ToolbarContent != null)
                    {
                        <div>
                            @ToolbarContent
                        </div>
                    }
                </div>
                <div>
                    @if (ShowDropdownViewSelector)
                    {
                        <EnumMenu Value="@View" T="CalendarView" Color="@Color" Variant="ButtonVariant" AllowedValues="AllowedViews()" ValueChanged="OnViewChanging"/>
                    }
                    else
                    {
                        <EnumSwitch Value="@View" T="CalendarView" Color="@Color" AllowedValues="AllowedViews()" ValueChanged="OnViewChanging"/>
                    }
                </div>
            </div>;

    /// <summary>
    /// Renders the month view.
    /// </summary>
    protected virtual RenderFragment RenderMonthView =>
        @<MonthView Culture="@Culture"  T="T"/>;

    /// <summary>
    /// Renders the week view.
    /// </summary>
    protected virtual RenderFragment RenderWeekView =>
        @<WeekView Culture="@Culture" T="T" />;


    /// <summary>
    /// Renders the work week view.
    /// </summary>
    protected virtual RenderFragment RenderWorkWeekView =>
        @<WorkWeekView Culture="@Culture" T="T" />;

    /// <summary>
    /// Renders the day view.
    /// </summary>
    protected virtual RenderFragment RenderDayView =>
        @<DayView Culture="@Culture" T="T" />;

}
