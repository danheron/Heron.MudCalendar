@namespace Heron.MudCalendar
@inherits CalendarViewBase
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime

@Render

@code {

    /// <summary>
    /// Renders the component.
    /// </summary>
    protected virtual RenderFragment Render =>
        @<div class="mud-cal-week-view">
            <div class="d-flex flex-column mud-height-full">
                @RenderHeader
                <div class="flex-grow-1">
                    <div class="d-block relative mud-height-full">
                        <div @ref="_scrollDiv" class="mud-cal-week-scroll">
                            <div class="d-block relative">
                                @RenderTimes
                                @* @RenderDays *@
                                <MudDropContainer
                                    @ref="_dropContainer"
                                    T="CalendarItem"
                                    Items="Calendar.Items"
                                    ItemsSelector="@((item, dropzone) => item.Id == dropzone)"
                                    ItemIsDisabled="@((_) => !Calendar.EnableDragItems)"
                                    ItemDropped="ItemDropped"
                                    CanDropClass="mud-cal-week-drop-ok">
                                    <ChildContent>
                                        @RenderCells
                                    </ChildContent>
                                    <ItemRenderer>
                                        @RenderTemplate(context)
                                    </ItemRenderer>
                                </MudDropContainer>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>;

    /// <summary>
    /// Renders the header that contains the day names.
    /// </summary>
    protected virtual RenderFragment RenderHeader =>
        @<div>
            <table>
                <colgroup>
                    <col class="mud-cal-time-column"/>
                </colgroup>
                <thead>
                <tr>
                    <th></th>
                    @foreach (var cell in Cells)
                    {
                        <th>
                            @RenderDayTitle(cell)
                        </th>
                    }
                </tr>
                </thead>
            </table>
        </div>;

    /// <summary>
    /// Renders the title of a day.
    /// </summary>
    protected virtual RenderFragment RenderDayTitle(CalendarCell cell) => __builder =>
    {
        __builder.AddContent(1, cell.Date.ToString("ddd"));
        __builder.AddContent(2, " ");
        __builder.AddContent(3, cell.Date.Day);
    };

    /// <summary>
    /// Renders the day/week structure.
    /// </summary>
    protected virtual RenderFragment RenderTimes =>
        @<div class="d-block relative">
            <table>
                <colgroup>
                    <col class="mud-cal-time-column"/>
                </colgroup>
                <tbody>
                @for (var row = 0; row < CellsInDay; row++)
                {
                    <tr>
                        <td class="@TimeCellClassname(row)" style="@CellHeightStyle()">
                            @if (IsHourCell(row))
                            {
                                @DrawTime(row)
                            }
                        </td>
                        @foreach (var cell in Cells)
                        {
                            <td class="@DayCellClassname(row)" style="@DayStyle(cell, row)">
                                @if (Calendar.ShowCurrentTime && TimelineRow() == row)
                                {
                                    <hr class="mud-cal-current-time" style="@TimelineStyle()"/>
                                }
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>;

    /// <summary>
    /// Renders the cells.
    /// </summary>
    protected virtual RenderFragment RenderCells =>
        @<div class="mud-cal-week-layer">
            <table>
                <colgroup>
                    <col class="mud-cal-time-column"/>
                </colgroup>
                <tbody>
                <tr>
                    <td></td>
                    @foreach (var cell in Cells)
                    {
                        @RenderCell(cell)
                    }
                </tr>
                </tbody>
            </table>
        </div>;

    /// <summary>
    /// Renders an individual cell.
    /// </summary>
    protected virtual RenderFragment RenderCell(CalendarCell cell) =>
        @<td class="mud-cal-week-cell-holder" style="border: none;">
            @for (var i = 0; i < CellsInDay; i++)
            {
                var row = i;
                <MudDropZone T="CalendarItem" OnlyZone="true" Style="@CellHeightStyle()" Identifier="@string.Concat(cell.Date.Date.ToString("d"), "_", row.ToString())">
                    @if (Calendar.CellClicked.HasDelegate)
                    {
                        <MudLink @onclick="() => OnCellLinkClicked(cell, row)" Class="mud-cal-week-cell-link">
                            <div class="mud-cal-week-link"></div>
                        </MudLink>
                    }
                    &nbsp;
                </MudDropZone>
            }
            @RenderCellContents(cell)
        </td>;

    /// <summary>
    /// Renders the contents of a cell.
    /// </summary>
    protected virtual RenderFragment RenderCellContents(CalendarCell cell) => __builder =>
    {
        var positions = CalcPositions(cell.Items, DateOnly.FromDateTime(cell.Date));
        foreach (var position in positions)
        {
            if (position.Item.Start.Date == cell.Date.Date)
            {
                <WeekDropZone Item="@position.Item" Style="@EventStyle(position)">
                    @if (Calendar.EnableResizeItems && !position.Item.IsMultiDay)
                    {
                        <Resizer IntervalSize="Calendar.DayCellHeight" HeightChanged="@(newHeight => ItemHeightChanged(position.Item, newHeight))"/>
                    }
                </WeekDropZone>
            }
            else
            {
                <div style="@EventStyle(position)">
                    @RenderTemplate(position.Item)
                </div>
            }
        }
    };
    
    /// <summary>
    /// Renders the CellTemplate with a click handler if required.
    /// </summary>
    protected virtual RenderFragment RenderTemplate(CalendarItem item) => __builder =>
    {
        @if (Calendar.ItemClicked.HasDelegate)
        {
            <div @onclick="() => OnItemClicked(item)" @onclick:stopPropagation="true" class="mud-cal-week-template-holder mud-cal-clickable">
                @CellTemplate.Invoke(item)
            </div>
        }
        else
        {
            <div class="mud-cal-week-template-holder">
                @CellTemplate.Invoke(item)
            </div>
        }
    };

}