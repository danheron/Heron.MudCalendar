@namespace Heron.MudCalendar.Docs.Examples

<MudCalendar T="CalendarItem" Items="_events" CellClicked="CellClicked" IsDateTimeDisabledFunc="IsDateTimeDisabled" AdditionalDateTimeClassesFunc="AdditionalDateTimeClasses" />

<style>
    .gray-background {
        background-color: var(--mud-palette-background-gray);
    }
</style>

@code {
    
    [Inject]
    private IDialogService DialogService { get; set; }
    
    private bool IsDateTimeDisabled(DateTime dateTime, CalendarView view)
    {
        // Disable weekends and before 8:00 and after 17:00 gray
        return IsWeekend(dateTime) || (view != CalendarView.Month && IsOutsideOfficeHours(dateTime));
    }
    
    private string AdditionalDateTimeClasses(DateTime dateTime, CalendarView view)
    {
        // Make weekends and before 8:00 and after 17:00 gray
        if (IsWeekend(dateTime) || (view != CalendarView.Month && IsOutsideOfficeHours(dateTime)))
        {
            return "gray-background";
        }

        return string.Empty;
    }
    
    private Task CellClicked(DateTime dateTime)
    {
        return DialogService.ShowMessageBox("Cell Clicked", dateTime.ToString(Thread.CurrentThread.CurrentCulture));
    }

    private bool IsWeekend(DateTime dateTime) => 
        (int)dateTime.DayOfWeek == 0 || (int)dateTime.DayOfWeek == 6;

    private bool IsOutsideOfficeHours(DateTime dateTime) =>
        dateTime.TimeOfDay < new TimeSpan(8, 0, 0) || dateTime.TimeOfDay >= new TimeSpan(17, 0, 0);
    
    private List<CalendarItem> _events = new()
    {
        new CalendarItem
        {
            Start = DateTime.Today.AddHours(10),
            End = DateTime.Today.AddHours(11),
            Text = "Event today"
        },
        new CalendarItem
        {
            Start = DateTime.Today.AddDays(1).AddHours(11),
            End = DateTime.Today.AddDays(1).AddHours(12.5),
            Text = "Event tomorrow"
        }
    };
}